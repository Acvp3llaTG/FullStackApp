@page "/fetchproducts"
@inject HttpClient HttpClient
@inject JsonSerializerOptions JsonSerializerOptions

<h3>Product List</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (Products == null)
{
    <p>Loading products...</p>
}
else if (Products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Stock Level</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Category?.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Stock</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public List<Product>? Products { get; set; }
    public string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(10));
            HttpResponseMessage response = await HttpClient.GetAsync("http://localhost:5277/api/productlist", cts.Token);

            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = $"API returned error: {(int)response.StatusCode} {response.ReasonPhrase}";
                Products = new List<Product>();
                return;
            }

            string jsonString = await response.Content.ReadAsStringAsync(cts.Token);

            if (string.IsNullOrWhiteSpace(jsonString))
            {
                ErrorMessage = "API returned an empty response.";
                Products = new List<Product>();
                return;
            }

            var products = JsonSerializer.Deserialize<List<Product>>(jsonString, JsonSerializerOptions);

            if (products is null)
            {
                ErrorMessage = "Failed to parse products from API response.";
                Products = new List<Product>();
                return;
            }

            Products = products;
        }
        catch (TaskCanceledException)
        {
            ErrorMessage = "The request timed out. Please try again later.";
            Products = new List<Product>();
        }
        catch (HttpRequestException httpEx)
        {
            ErrorMessage = $"Network error: {httpEx.Message}";
            Products = new List<Product>();
        }
        catch (JsonException jsonEx)
        {
            ErrorMessage = $"Error parsing API response: {jsonEx.Message}";
            Products = new List<Product>();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unexpected error: {ex.Message}";
            Products = new List<Product>();
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public double Price { get; set; }
        public int Stock { get; set; }
        public CategoryInfo? Category { get; set; }
    }

    public class CategoryInfo
    {
        public int Id { get; set; }
        public string? Name { get; set; }
    }
}